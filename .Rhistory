se2
plot(se1,se2)
plot(se1,se2)
data.frame(se1,se2)
c(se.theta2,se.beta2)
se.theta2 = sqrt(diag(vcov(theta.reg)))
se.beta2 = sqrt(diag(vcov(beta.reg)))
se2 = c(se.theta2,se.beta2); se2=se2[sort(names(se2))]; SE.2.steps=se2[-c(1:2)]
se1 <- sqrt(diag(vcov(model4)))
names(se1) = row.names(summary(model4)$coefficients)
se1 = se1[sort(names(se1))]; SE.1.step=se1[-1]
plot(SE.1.step,SE.2.steps)
SE.two.steps=se2[-c(1:2)]
SE.one.step=se1[-1]
plot(SE.one.step,SE.two.steps)
summary(model4)$coefficients
summary(model4)$coefficients$Estimate
Estimates.one.step=summary(model4)$coefficients[,1]
names(Estimates.one.step)
Estimates.one.step=summary(model4)$coefficients[-1,1]
names(Estimates.one.step)
Estimates.two.step=c(summary(theta.reg)$coefficients[-1,1],summary(beta.reg)$coefficients[-1,1])
names(Estimates.two.step)
names(se.theta2)[names(se.theta2)=="gender"]="gender.1"
se.theta2
se.theta2 = sqrt(diag(vcov(theta.reg))); names(se.theta2)[names(se.theta2)=="gender"]="gender.1"
se.beta2 = sqrt(diag(vcov(beta.reg)))
se2 = c(se.theta2,se.beta2); se2=se2[sort(names(se2))]; SE.two.steps=se2[-c(1:2)]
se1 <- sqrt(diag(vcov(model4)))
names(se1) = row.names(summary(model4)$coefficients)
se1 = se1[sort(names(se1))]; SE.one.step=se1[-1]
plot(SE.one.step,SE.two.steps)
plot(SE.one.step,SE.two.steps); abline(a=0,b=1)
est1=summary(model4)$coefficients[-1,1]; Estimates.one.step=est1[sort(names(est1))]
Estimates.one.step
est2=c(est.theta2,est.beta2); Estimates.two.step=est2[sort(names(est2))]
est1=summary(model4)$coefficients[-1,1]; Estimates.one.step=est1[sort(names(est1))]
est.theta2=summary(theta.reg)$coefficients[-1,1]; names(est.theta2)[names(se.theta2)=="gender"]="gender.1"
est.beta2=-summary(beta.reg)$coefficients[-1,1]
est2=c(est.theta2,est.beta2); Estimates.two.step=est2[sort(names(est2))]
plot(Estimates.one.step,Estimates.two.steps); abline(a=0,b=1)
est1=summary(model4)$coefficients[-1,1]; Estimates.one.step=est1[sort(names(est1))]
est.theta2=summary(theta.reg)$coefficients[-1,1]; names(est.theta2)[names(se.theta2)=="gender"]="gender.1"
est.beta2=-summary(beta.reg)$coefficients[-1,1]
est2=c(est.theta2,est.beta2); Estimates.two.steps=est2[sort(names(est2))]
plot(Estimates.one.step,Estimates.two.steps); abline(a=0,b=1)
data.frame(Estimates.one.step,Estimates.two.steps)
plot(rowMeans(RT),theta$Rasch)
plot(theta$Rasch,rowMeans(RT))
plot(theta$Rasch,theta$RT)
plot(beta$Rasch,beta$RT)
View(beta)
View(items)
con=paste(items[,20:22])
con
con=paste(items[,20:22],sep="")
con
con=cat(items[,20:22],sep="")
con=cat(items[,20:22])
con <- do.call(paste, c(items[,20:22], sep=""))
con
table(con)
items$foil.quality = do.call(paste, c(items[,c("n.dis.order","n.dis.family","n.dis.genus")], sep=""))
plot(items$foil.quality,beta$Rasch)
items$foil.quality = factor(items$foil.quality)
plot(items$foil.quality,beta$Rasch)
table(items$foil.quality)
plot(items$foil.quality,beta$Rasch,xlab="item foil design",ylab="item difficulty")
plot(factor(items$gender),beta$Rasch,xlab="male or female bird image",ylab="item difficulty")
plot(factor(items$ABAcode),beta$Rasch,xlab="ABA commonness rating",ylab="item difficulty")
plot(person$training,theta$Rasch)
plot(person$age,theta$Rasch,xlab="participant age",ylab="person ability")
plot(person$gender,theta$Rasch,xlab="participant gender",ylab="person ability")
plot(factor(person$gender),theta$Rasch,xlab="participant gender",ylab="person ability")
plot(person$training,theta$Rasch,xlab="training received",ylab="person ability")
plot(person$freq,theta$Rasch,xlab="birding frequency",ylab="person ability")
plot(person$experience,theta$Rasch,xlab="birding experience (in years)",ylab="person ability")
table(pars$part_birder)
table(pars$part_sex)
plot(person$selfrate,theta$Rasch,xlab="self rating",ylab="person ability")
plot(person$part.rate,theta$Rasch,xlab="self rating",ylab="person ability")
plot(factor(person$medcond),theta$Rasch,xlab="participant gender",ylab="person ability")
plot(factor(person$medcond),theta$Rasch,xlab="participant medical condition",ylab="person ability")
plot(beta$Rasch,beta$RT)
table(person$medcond)
plot(beta$Rasch,beta$RT,xlab="item difficulty",ylab="item time intensity")
plot(theta$Rasch,theta$RT,xlab="person ability",ylab="person speediness")
load("/Users/jianhongshen/Dropbox/classes/IRT2/Project/modelfits.rdata")
age.range=max(person$age)-min(person$age)
max(person$age)
hist(person$age)
sort(person$age)
person1=person
load("/Users/jianhongshen/Dropbox/classes/IRT2/Project/covariates.rdata")
person1$age_orig=person$age
sort(person$age)
load("/Users/jianhongshen/Dropbox/classes/IRT2/Project/modelfits.rdata")
person$age_orig=person$age_orig
person$age_orig
person$age_orig=person1$age_orig
person$age_orig
remove("person1")
save.image("/Users/jianhongshen/Dropbox/classes/IRT2/Project/modelfits.rdata")
age.range=max(person$age_orig)-min(person$age_orig)+1
experience.range=max(person$experience)-min(person$experience)+1
age.range=c(min(person$age_orig),max(person$age_orig))
experience.range=c(min(person$experience),max(person$experience))
theta.heat = matrix(NA,ncol=age.range,nrow=experience.range)
age.range=c(min(person$age_orig):max(person$age_orig))
experience.range=c(min(person$experience):max(person$experience))
theta.heat = matrix(NA,ncol=age.range,nrow=experience.range)
age.range=c(min(person$age_orig):max(person$age_orig))
experience.range=c(min(person$experience):max(person$experience))
theta.heat = matrix(NA,ncol=length(age.range),nrow=length(experience.range))
for (i in age.range) {
for (j in experience.range) {
theta.heat[i,j]=mean(person[(person$age_orig==i)&(person$experience==j),"theta"])
}
}
(person$age_orig==i)&(person$experience==j)
person[(person$age_orig==i)&(person$experience==j),"theta"]
mean(person[(person$age_orig==i)&(person$experience==j),"theta"])
age.range=c(min(person$age_orig):max(person$age_orig))
experience.range=c(min(person$experience):max(person$experience))
theta.heat = matrix(NA,ncol=length(age.range),nrow=length(experience.range))
for (i in 1:length(age.range)) {
agei = age.range[i]
for (j in 1:length(experience.range)) {
experiencej = experience.range[j]
theta.heat[i,j]=mean(person[(person$age_orig==agei)&(person$experience==experiencej),"theta"])
}
}
age.range=c(min(person$age_orig):max(person$age_orig))
experience.range=c(min(person$experience):max(person$experience))
theta.heat = matrix(NA,ncol=length(age.range),nrow=length(experience.range))
for (i in 1:length(age.range)) {
agei = age.range[i]
for (j in 1:length(experience.range)) {
experiencej = experience.range[j]
theta.heat[j,i]=mean(person[(person$age_orig==agei)&(person$experience==experiencej),"theta"])
}
}
View(theta.heat)
heatmap(theta.heat)
View(theta.heat)
heatmap(theta.heat, Rowv=NA, Colv=NA)
heatmap(theta.heat, Rowv=NA, Colv=NA, col = heat.colors(256), scale="column", margins=c(5,10))
theta.heat = matrix(NA,ncol=length(age.range),nrow=length(experience.range),dimnames=list(experience.range,age.range))
for (i in 1:length(age.range)) {
agei = age.range[i]
for (j in 1:length(experience.range)) {
experiencej = experience.range[j]
theta.heat[j,i]=mean(person[(person$age_orig==agei)&(person$experience==experiencej),"theta"])
}
}
heatmap(theta.heat, Rowv=NA, Colv=NA)
View(theta)
View(theta.heat)
max(theta.heat)
max(person$theta)
heatmap(theta.heat, Rowv=NA, Colv=NA,xlab="participant age",ylab="participant experience")
??glmer
license()
library(lme4)
library(optimx)
load("/Users/jianhongshen/Dropbox/classes/IRT2/Project/modelfits.rdata")
plot(person$age_orig,person$theta)
plot(person$age_orig,theta$Rasch,xlab="participant age",ylab="person ability")
plot(person$experience,theta$Rasch,xlab="birding experience (in years)",ylab="person ability")
load("/Users/jianhongshen/Dropbox/classes/IRT2/Project/covariates.rdata")
table(item$gender)
table(item$ABAcode)
load("/Users/jianhongshen/Dropbox/classes/IRT2/Project/modelfits.rdata")
plot(theta$Rasch,theta$RT,xlab="person ability",ylab="person speediness")
cor(person$selfrate,theta$Rasch)
table(person$selfrate)
table(as.numeric(person$selfrate))
cor(as.numeric(person$selfrate),theta$Rasch)
cor(person$part.rate,theta$Rasch)
######### ANOVA on data #######
rm(list=ls())
load("~/Documents/Lab/Project/Modeling_Mar_2014/Collaboration/tutorial-code/Entry2014Data/2015/birder/Entry2015_birder_Data.Rdata")
library(ez)
library(doBy)
library(reshape2)
se <- function(x) {sd(x)/sqrt(length(x))}
data = do.call(rbind,lapply(dat,data.frame))
data = data[(data$rt<3000 & data$rt>100),] # delete abnormal RTs
data = data[data$filler==0,] # delete filler trials
table(data$subjNum)/384
###first, analyze effects on RT ####
# convert conditions to factor
data$cond <- factor(data$cond, c('super','basic','subor'))
data$type = factor(data$type, c('true','false'))
data$noise=factor(data$coherence, levels=c('noisy','orig'))
data$object = factor(data$object,c('bird','dog'))
data$subjNum = factor(data$subjNum)
acc=summaryBy(acc~type+object+cond+subjNum,data=data,FUN=c(mean,se,length))
rtc=summaryBy(rt~type+object+cond+subjNum,data=data[data$acc==1,],FUN=c(mean,median,se,length))
rte=summaryBy(rt~type+object+cond+subjNum,data=data[data$acc==0,],FUN=c(mean,median,se,length))
#!!!! reverse code the data or not based on participants' overall performance
acc[acc$acc.mean<0.6,]
r=3
data[data$type==acc$type[r] & data$object==acc$object[r] & data$cond==acc$cond[r] & data$subjNum==acc$subjNum[r],c("image","label","response")]
data[data$type==acc$type[r] & data$object==acc$object[r] & data$cond==acc$cond[r] & data$subjNum==acc$subjNum[r],c("image","label","response","subjNum")]
data[data$type==acc$type[r] & data$object==acc$object[r] & data$cond==acc$cond[r] & data$subjNum==acc$subjNum[r],c("image","label","response","subjNum","rt")]
x=data[data$type==acc$type[r] & data$object==acc$object[r] & data$cond==acc$cond[r] & data$subjNum==acc$subjNum[r],c("image","label","response","subjNum","rt")]
x=data[data$type==acc$type[r] & data$object==acc$object[r] & data$cond==acc$cond[r] & data$subjNum==acc$subjNum[r],c("image","label","response","subjNum","rt")]
x=data[data$type==acc$type[r] & data$object==acc$object[r] & data$cond==acc$cond[r] & data$subjNum==acc$subjNum[r],c("image","label","response","subjNum","rt","trial")]
x
ezANOVA(data,wid=.(subjNum),dv=.(rt),within=.(cond,type,object))
x=data[data$type==acc$type[r] & data$object==acc$object[r] & data$cond==acc$cond[r] & data$subjNum==acc$subjNum[r],c("image","label","response","subjNum","rt","trial")]
ezANOVA(data[data$cond!="super"],wid=.(subjNum),dv=.(rt),within=.(cond,type,object))
ezANOVA(data[data$cond!="super",],wid=.(subjNum),dv=.(rt),within=.(cond,type,object))
ezANOVA(data[data$cond!="super",],wid=.(subjNum),dv=.(rt),within=.(cond,type,object,acc))
ezANOVA(data,wid=.(subjNum),dv=.(rt),within=.(cond,type,object,acc))
data$acc=factor(data$acc)
ezANOVA(data,wid=.(subjNum),dv=.(rt),within=.(cond,type,object,acc))
ezANOVA(data,wid=.(subjNum),dv=.(rt),within=.(cond,object,acc))
ezDesign(data,wid=.(subjNum),dv=.(rt),within=.(cond,object,acc))
ezDesign(data,x=c(cond,object,acc),y=rt)
ezDesign(data,x=acc,y=rt)
ezDesign(data,x=cond,y=rt)
dev.off()
ezDesign(data,x=cond,y=rt)
load("/Users/jianhongshen/Documents/Lab/Project/Modeling_Mar_2014/Collaboration/tutorial-code/Entry2014Data/2015/birder/stan/stan.param.v2.Rdata")
View(param_rec)
rm(list=ls())
load("~/Documents/Lab/Project/Modeling_Mar_2014/Collaboration/tutorial-code/Entry2014Data/2015/birder/Entry2015_birder_Data.Rdata")
library(ez)
library(doBy)
library(reshape2)
se <- function(x) {sd(x)/sqrt(length(x))}
data = do.call(rbind,lapply(dat,data.frame))
data = data[(data$rt<3000 & data$rt>100),] # delete abnormal RTs
data = data[data$filler==0,] # delete filler trials
table(data$subjNum)/384
###first, analyze effects on RT ####
# convert conditions to factor
data$cond <- factor(data$cond, c('super','basic','subor'))
data$type = factor(data$type, c('true','false'))
data$noise=factor(data$coherence, levels=c('noisy','orig'))
data$object = factor(data$object,c('bird','dog'))
data$subjNum = factor(data$subjNum)
# effects on rt
ezStats(data,
dv=.(rt),
wid=.(subjNum),
within=.(cond,type),
between=.(order))
ezANOVA(data,wid=.(subjNum),dv=.(rt),within=.(cond,type,object))
# effects on acc
ezANOVA(data,wid=.(subjNum),dv=.(acc),within=.(cond,type,object))
acc=summaryBy(acc~type+object+cond+subjNum,data=data,FUN=c(mean,se,length))
rtc=summaryBy(rt~type+object+cond+subjNum,data=data[data$acc==1,],FUN=c(mean,median,se,length))
rte=summaryBy(rt~type+object+cond+subjNum,data=data[data$acc==0,],FUN=c(mean,median,se,length))
acc[acc$acc.mean<0.6,]
r.coded = c(3,9,14)  ####!!!! change this
acc[r.coded,"acc.mean"]=1-acc[c(3,9,14),"acc.mean"];
acc[acc$acc.mean<0.6,]
for (r in r.coded) {
rtc.row = rtc$type==acc$type[r] & rtc$object==acc$object[r] & rtc$cond==acc$cond[r] & rtc$subjNum==acc$subjNum[r]
rte.row = rte$type==acc$type[r] & rte$object==acc$object[r] & rte$cond==acc$cond[r] & rte$subjNum==acc$subjNum[r]
t=rte[rte.row,c(5:8)]
rte[rte.row,c(5:8)] = rtc[rtc.row,c(5:8)]
rtc[rtc.row,c(5:8)] = t
print(rtc[rtc.row,])
print(rte[rte.row,])
}
rm(list=ls())
load("~/Documents/Lab/Project/Modeling_Mar_2014/Collaboration/tutorial-code/Entry2014Data/2015/birder/Entry2015_birder_Data.Rdata")
library(ez)
library(doBy)
library(reshape2)
se <- function(x) {sd(x)/sqrt(length(x))}
data = do.call(rbind,lapply(dat,data.frame))
data = data[(data$rt<3000 & data$rt>100),] # delete abnormal RTs
data = data[data$filler==0,] # delete filler trials
table(data$subjNum)/384
###first, analyze effects on RT ####
# convert conditions to factor
data$cond <- factor(data$cond, c('super','basic','subor'))
data$type = factor(data$type, c('true','false'))
data$noise=factor(data$coherence, levels=c('noisy','orig'))
data$object = factor(data$object,c('bird','dog'))
data$subjNum = factor(data$subjNum)
# effects on rt
ezStats(data,
dv=.(rt),
wid=.(subjNum),
within=.(cond,type),
between=.(order))
ezANOVA(data,wid=.(subjNum),dv=.(rt),within=.(cond,type,object))
# effects on acc
ezANOVA(data,wid=.(subjNum),dv=.(acc),within=.(cond,type,object))
acc=summaryBy(acc~type+object+cond+subjNum,data=data,FUN=c(mean,se,length))
rtc=summaryBy(rt~type+object+cond+subjNum,data=data[data$acc==1,],FUN=c(mean,median,se,length))
rte=summaryBy(rt~type+object+cond+subjNum,data=data[data$acc==0,],FUN=c(mean,median,se,length))
#!!!! reverse code the data or not based on participants' overall performance
acc[acc$acc.mean<0.6,]
r.coded = c(3,9,14)  ####!!!! change this
acc[r.coded,"acc.mean"]=1-acc[c(3,9,14),"acc.mean"];
acc[acc$acc.mean<0.6,]
for (r in r.coded) {
rtc.row = rtc$type==acc$type[r] & rtc$object==acc$object[r] & rtc$cond==acc$cond[r] & rtc$subjNum==acc$subjNum[r]
rte.row = rte$type==acc$type[r] & rte$object==acc$object[r] & rte$cond==acc$cond[r] & rte$subjNum==acc$subjNum[r]
t=rte[rte.row,c(5:8)]
rte[rte.row,c(5:8)] = rtc[rtc.row,c(5:8)]
rtc[rtc.row,c(5:8)] = t
print(rtc[rtc.row,])
print(rte[rte.row,])
}
ezANOVA(rtc,wid=.(subjNum),dv=.(rt.mean),within=.(cond,type,object))
ezANOVA(rtc[rtc$cond!="super",],wid=.(subjNum),dv=.(rt.mean),within=.(cond,type,object))
rtc=summaryBy(rt~type+object+cond+subjNum,data=data[data$acc==1,],FUN=c(mean,median,se,length))
ezANOVA(rtc[rtc$cond!="super",],wid=.(subjNum),dv=.(rt.mean),within=.(cond,type,object))
ezANOVA(rtc,wid=.(subjNum),dv=.(rt.mean),within=.(cond,type,object))
ezANOVA(rte[rte$cond!="super",],wid=.(subjNum),dv=.(rt.mean),within=.(cond,type,object))
ezANOVA(acc[acc$cond!="super",],wid=.(subjNum),dv=.(acc.mean),within=.(cond,type,object))
ezANOVA(acc,wid=.(subjNum),dv=.(acc.mean),within=.(cond,type,object))
qps=list()
install.packages("glba")
library("glba", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
?lba
rm(list=ls()); graphics.off()
library(ggplot2);
opar <- theme_update(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(size=21),
axis.text.x=element_text(size=14,color="black"),axis.title.x=element_text(size=21,color="black"),
axis.text.y=element_text(size=14,color="black"),axis.title.y=element_text(size=21,color="black"),
panel.background = element_rect(colour = "black"))
theme_grey
theme_get()
theme_set(theme_grey())
theme_get()
opar <- theme_update(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(size=21),
axis.text.x=element_text(size=14,color="black",vjust=1),
axis.title.x=element_text(size=21,color="black",hjust=1),
axis.text.y=element_text(size=14,color="black"),
axis.title.y=element_text(size=21,color="black",angle=90),
panel.background = element_rect(colour = "black"))
old = theme_set(opar)
old==opar
old
opar
load("/Users/jianhongshen/Documents/Courses/Course_Sem6/IRT2/Project/modelfits.rdata")
person$freq.interval = as.numeric(as.character(factor(person$freq,labels=c("0.03835616", "0.46666667", "1", "2","4"))))
cor(person$age,cbind(theta$RT,person$theta))
cor(person$theta,cbind(theta$freq.interval,person$experience))
cor(person$theta,cbind(person$freq.interval,person$experience))
cor.test(person$theta,cbind(person$experience))
rm(list=ls())
## Call libraries irtoys and ltem
library(irtoys)
library(ltm)
binary <- read.table("/Users/jianhongshen/Documents/Lab/Project/Birds-Aug-2013/Result2014/IRT/VBETOct2014_94.txt",header=TRUE)
sub_id = read.table("/Users/jianhongshen/Documents/Lab/Project/Birds-Aug-2013/Result2014/IRT/VBETOct2014_subnames_94.txt",header=TRUE)
par_survey = read.table("/Users/jianhongshen/Documents/Lab/Project/Birds-Aug-2013/Result2014/IRT/exp_participant.csv",header=TRUE,sep=";",stringsAsFactors=F,fill=TRUE)
hist(rowSums(binary))
sub_id=sub_id$x
Rasch <- est(binary,model="1PL",engine="ltm",rasch=TRUE)
irf(Rasch$est[1,]) # For Item 1
irf(Rasch$est[,]) # For all items
plot(irf(Rasch$est[c(1),]),label=TRUE) # Plot item response function for item 1
plot(irf(Rasch$est),label=TRUE) # Plot item response function for all items
Two <- est(binary,model="2PL",engine="ltm")
scp(binary,Rasch$est) #The observed sum scores are shown in red.
Rasch_iif <- iif(Rasch$est)
plot(iif(Rasch$est[c(1),]),label=TRUE) # Plot item information function for item 1
plot(iif(Rasch$est),label=TRUE) # Plot item information function for all items
plot(tif(Rasch$est),label=TRUE) # Plot test information function
Two
Theta_2PL <- eap(resp=binary, ip=Two$est, qu=normal.qu())
Rasch.th <- eap(resp=binary,ip=Rasch$est,qu=normal.qu())
View(Rasch.th)
View(Theta_2PL)
plot(Theta_2PL[,1],Rasch.th[,1])
cor(Theta_2PL[,1],Rasch.th[,1])
Rasch$est
cor(Rasch$est[,2],Two$est[,2])
Two_iif <- iif(Two$est)
plot(iif(Two$est[c(1),]),label=TRUE) # Plot item information function for item 1
plot(irf(Two$est),label=TRUE) # Plot item response function for all items
Three <- est(binary,model="3PL",engine="ltm")
Three$est
sd(Three$est[,1])
sort(Three$est[,3])
cor(Rasch$est[,2],Three$est[,2])
cor(Two$est[,2],Three$est[,2])
cor(Two$est[,2],Rasch$est[,2])
itemfit = matrix(0,94,3)
for (i in 1:nrep){
itemfit_i <- itf(resp=binary, ip=Two$est, stat = "lr", item=i, do.plot = FALSE)
itemfit[i,]=itemfit_i
}
for (i in 1:94){
itemfit_i <- itf(resp=binary, ip=Two$est, stat = "lr", item=i, do.plot = FALSE)
itemfit[i,]=itemfit_i
}
View(itemfit)
itemfit[itemfit[,3]<0.05,]
plot(irf(Three$est),label=TRUE)
itemfit = matrix(0,94,3)
for (i in 1:94){
itemfit_i <- itf(resp=binary, ip=Rasch$est, stat = "lr", item=i, do.plot = FALSE)
itemfit[i,]=itemfit_i
}
itemfit[itemfit[,3]<0.05,]
View(itemfit)
itemfit = matrix(0,94,3)
for (i in 1:94){
itemfit_i <- itf(resp=binary, ip=Three$est, stat = "lr", item=i, do.plot = FALSE)
itemfit[i,]=itemfit_i
}
itemfit[itemfit[,3]<0.05,]
View(itemfit)
plot(irf(Three$est[93,]),label=TRUE)
plot(irf(Three$est[89,]),label=TRUE)
itemfit_i <- itf(resp=binary, ip=Three$est, stat = "lr", item=i, do.plot = T)
itemfit_i <- itf(resp=binary, ip=Three$est, stat = "lr", item=93, do.plot = T)
itemfit_i <- itf(resp=binary, ip=Three$est, stat = "lr", item=89, do.plot = T)
itemfit_i <- itf(resp=binary, ip=Three$est, stat = "lr", item=62, do.plot = T)
itemfit_i <- itf(resp=binary, ip=Three$est, stat = "lr", item=52, do.plot = T)
table(binary$item52)
Three$est[52,]
View(binary)
for (i in 1:94){
itemfit_i <- itf(resp=binary, ip=Rasch$est, stat = "lr", item=i, do.plot = T)
itemfit[i,]=itemfit_i
}
for (i in 1:94){
itemfit_i <- itf(resp=binary, ip=Rasch$est, stat = "lr", item=i, do.plot = T)
itemfit[i,]=itemfit_i
}
table(binary$item52)
for (i in 1:94){
itemfit_i <- itf(resp=binary, ip=Three$est, stat = "lr", item=i, do.plot = T)
itemfit[i,]=itemfit_i
}
itemfit_i <- itf(resp=binary, ip=Three$est, stat = "lr", item=52, do.plot = T)
itemfit_i <- itf(resp=binary, ip=Three$est, stat = "lr", item=62, do.plot = T)
itemfit_i <- itf(resp=binary, ip=Three$est, stat = "lr", item=93, do.plot = T)
itemfit_i <- itf(resp=binary, ip=Three$est, stat = "lr", item=89, do.plot = T)
personfit <- api(binary, Three$est)
sort(personfit)
qnorm(0.95)
which(personfit==min(personfit))
which(personfit<3)
which(personfit<-3)
which.min(personfit)
personfit <- api(binary, Three$est)
which.min(personfit)
binary[217,]
myTheme <- theme_update(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(size=21),
axis.text.x=element_text(size=14,color="black",vjust=1),
axis.title.x=element_text(size=21,color="black"),
axis.text.y=element_text(size=14,color="black",hjust=1),
axis.title.y=element_text(size=21,color="black",angle=90),
panel.background = element_rect(colour = "black"))
library(ggplot2);
myTheme <- theme_update(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(size=21),
axis.text.x=element_text(size=14,color="black",vjust=1),
axis.title.x=element_text(size=21,color="black"),
axis.text.y=element_text(size=14,color="black",hjust=1),
axis.title.y=element_text(size=21,color="black",angle=90),
panel.background = element_rect(colour = "black"))
myTheme
install.packages("ProjectTemplate")
library("ProjectTemplate", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
db.reader("participants.db", "sample-jspsych-psiturk-experiment/participants.db", "rt")
db.reader("participants.db", "sample-jspsych-psiturk-experiment/participants.db")
db.reader(data.file, filename, variable.name)
db.reader
db.reader <- function(data.file, filename, variable.name)
{
require.package('RSQLite')
sqlite.driver <- dbDriver("SQLite")
connection <- dbConnect(sqlite.driver,
dbname = filename)
tables <- dbListTables(connection)
for (table in tables)
{
message(paste('  Loading table:', table))
data.parcel <- dbReadTable(connection,
table,
row.names = NULL)
assign(clean.variable.name(table),
data.parcel,
envir = .TargetEnv)
}
disconnect.success <- dbDisconnect(connection)
if (! disconnect.success)
{
warning(paste('Unable to disconnect from database:', filename))
}
}
db.reader("participants.db", "sample-jspsych-psiturk-experiment/participants.db")
install.packages("RSQLite")
db.reader("participants.db", "sample-jspsych-psiturk-experiment/participants.db")
db.reader("participants.db", "~/sample-jspsych-psiturk-experiment/participants.db")
getwd()
setwd("/Users/jianhongshen/sample-jspsych-psiturk-experiment")
getwd()
db.reader("participants.db", "./participants.db")
db.reader("participants.db", "./participants.db","rt")
